{
  "name": "williamledoux:tinytest-tools",
  "description": "Helpers for Meteor's tinytest",
  "score": 1.2,
  "atmoScore": 0,
  "version": "0.1.2",
  "lastUpdated": "2015-01-16T22:01:00.822Z",
  "starCount": 2,
  "gitStarCount": 2,
  "atmoStarCount": 0,
  "gitUrl": "https://github.com/williamledoux/meteor-tinytest-tools",
  "deleted": false,
  "badgit": false,
  "downloadCounts": {},
  "readme": "# tinytest-tools v0.1.2\n\n(Wanabee set of) helper(s) for working with Meteor's tinytest framework.\nContributions and comments are very welcome\n\n## Callback Watcher\n\nHelper to test one or more functions that are supposed to call callbacks they were passed as parameters.\n\nWith this helper, you can easily get or make understandable errors whenever some callbacks:\n  * haven't been called in a certain times, or have been called too many times\n  * have not been called in a specified order\n  * have been called with the wrong parameters\n  * have been called in the wrong context\n\n**Note:** this helper goal is similar to Meteor's  [callback_logger](https://github.com/meteor/meteor/blob/devel/packages/test-helpers/callback_logger.js), but with different API.\n\n### Example\n\n```javascript\n  Tinytest.addAsync(\"Example Test\", function(test, onComplete){\n    var CBW = new CallbacksWatcher(test);\n    // create a callback that should be called 3 times\n    // and would do nothing but returning true\n    var WrappedCallback1 = CBW.wrapCB(\"MyFirstCallback\", 3, true);\n    // wrap an existing callback that should be called 2 times \n    // in a specific order (it should be the first and sixth callback \n    //  called among all wrapped callbacks)\n    var WrappedCallback2 = CBW.wrapCB(\"MyFirstCallback\", [0, 5], ExistingCallback);\n    \n    MyTestedFunction(WrappedCallback1, WrappedCallback2);\n\n    // Call the oncomplete callback 10ms after the last wrapped callback has been called.\n    // Fail if some callbacks have not yet been called after 500ms.\n    CBW.wait(onComplete, 10, 500); \n  });\n```\n\n### API\n\n#### CallbacksWatcher\n\n`CallbacksWatcher` needs the tinytest's `test` object\n\n```javascript\n  Tinytest.addAsync(\"Example Test\", function(test, onComplete){\n    var CBW = new CallbacksWatcher(test);\n    //[...]\n  });\n```\n\n#### wrapCB(name, expectedCalls, callback, bForceArgs)\n\nWill wrap the `callback` and watch that it will be called `expectedCalls (number)` times  or \nin the `expectedCalls (array)` call sequence.\n\n`name` will be used in failure messages related to this callback.\n\nThe `callback` will be called with an extra last parameter `iCall` that may be useful for making different tests for each call\n\n```javascript\n  \n  var foo = function(a, b, c){};\n  var bar = function(){ Collection.insert({some:\"value\"}) };\n  var testedFunction = function(fooCB, barCB){\n    fooCB(1, 2, 3);\n    barCB();\n    fooCB(3, 2, 1);\n    barCB();\n    barCB();\n  };\n  \n  //[...]\n  Tinytest.addAsync(\"Example Test\", function(test, onComplete){\n    var CBW = new CallbacksWatcher(test);\n    // must be called 3 times with no specific order\n    var WrappedBar = CBW.wrapCB(\"\", 3, bar); \n    // must be the first and third called callback, with additionnal tests on arguments and context\n    var WrappedFoo = CBW.wrapCB(\"\", [0, 2], function(a, b, c, iCall){\n      switch(iCall){\n        case 0: // first call tests\n          test.equal(a, 1);\n          break; \n        case 1: // second call tests\n          test.equal(a, 3); \n          test.equal(Collection.find().count(), 12);\n          break; \n      }\n      // call the wrapped callback\n      return foo(a, b, c);\n    });\n    testedFunction(wrappedFoo, wrappedBar);\n    CBW.wait(onComplete, 10, 500); \n  });\n```\n\nHowever, in case the `callback` takes more than 5 parameters, or if the `bForceArgs` is set to ` true`, `callback`\nwill be called with an array of parameters. Note that `bForceArgs` needs to be `true` if some of the parameters of the\n`callback` may be ommitted by the tested function.\n\n```javascript\n  \n  var foo = function(a, b, c){};\n  var bar = function(a, b, c, d, e, f){};\n  var testedFunction = function(fooCB, barCB){\n    fooCB(1, 2); // not calling all parameters\n    barCB(1, 2, 3, 4, 5, 6); // more than 5 parameters\n    fooCB(3, 2); // not calling all parameters\n  };\n  \n  //[...]\n  Tinytest.addAsync(\"Example Test\", function(test, onComplete){\n    var CBW = new CallbacksWatcher(test);\n\n\n    // this won't work because of optional parameters:\n    var WrappedFoo = CBW.wrapCB(\"\", 1, foo); \n    // instead do:\n    var WrappedFoo = CBW.wrapCB(\"\", 2, function(args){\n      // optionnal tests on arguments:\n      switch(args.iCall){\n        case 0: test.equal(args[0], 1); break; // first call arg test\n        case 1: test.equal(args[0], 3); break; // second call arg test\n      }\n      return foo(args[0], args[1], args[2]);\n    }, true); // <-- bForceArgs needs to be true !!\n\n\n    // this won't work because more than 5 parameters:\n    var WrappedBar = CBW.wrapCB(\"\", 1, bar); \n    // instead do:\n    var WrappedBar = CBW.wrapCB(\"\", 1, function(args){\n      return bar(args[0], args[1], args[2], args[3], args[4], args[5]);\n    });\n\n    testedFunction(wrappedFoo, wrappedBar);\n    CBW.wait(onComplete, 10, 500); \n  });\n```\n\n`callback` can also not be a function:\n\n```javascript\n  var WrappedCallback1 = CBW.wrapCB(\"MyFirstCallback\", 1, 42); \n  // is similar to\n  var WrappedCallback1 = CBW.wrapCB(\"MyFirstCallback\", 1, function(){return 42;}); \n```\n\n#### wait(onComplete, delay, interval)\n\nWill call tinytest's `onComplete` callback `delay`ms after the last expected callback call has been made.\nWill make the test to fail if no callback has been called during `interval`ms\n\n```javascript\n  Tinytest.addAsync(\"Example Test\", function(test, onComplete){\n    //[...]\n    // Call the oncomplete callback 10ms after the last wrapped callback has been called.\n    // Fail if some callbacks have not yet been called after 500ms.\n    CBW.wait(onComplete, 10, 500); \n  });\n```\n",
  "changelog": "",
  "issues": 0,
  "objectID": "zxTn5BuuXcXzQjjCE"
}